from telebot import TeleBot
from telebot.types import KeyboardButton, ReplyKeyboardMarkup
import sqlite3
from constant import get_products_query, create_new_user_query
from utils import MenuStack, check_phone_number, check_address, set_integer_flag, get_integer_flag, update_user_filed, \
    get_product_data, start_getting_quantity, get_product_from_user, insert_data_to_basket, fetch_basket_data, \
    delete_item_from_basket, create_order

TOKEN = '5901370716:AAHAdCqATJZ6WSQRUm4buzP-fivEBdkYLuU'

bot = TeleBot(TOKEN, parse_mode=None)


def main_menu_keyboard():
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –≤ –Ω–∞—à–µ–º —Ç–≥ –±–æ—Ç–µ
    :return –û–±—å–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ReplyKeyboardMarkup
    """

    markup = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)

    cart = KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞üß∫")
    menu = KeyboardButton("–ú–µ–Ω—éüçî")
    settings = KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
    delivery = KeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞üöö")
    rep = KeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüìù")
    contacts = KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã‚òéÔ∏è")

    markup.add(cart)
    markup.add(menu, contacts)
    markup.add(settings, delivery, rep)

    return markup

stack = MenuStack(main_menu_keyboard())


def get_product_names() -> list:
    products = []

    try:
        conn = sqlite3.connect("Pizza_db")
        cursor = conn.cursor()
        sql = get_products_query()
        cursor.execute(sql)

        for product in cursor.fetchall():
            products.append(product[0])

    except Exception as e:
        print(e)

    return products

def menu_keyboard():
    '''—ç—Ç–æ –º–µ–Ω—é –≤—ã—Å–≤–µ—á–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    :return –û–±—å–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ReplyKeyboardMarkup'''

    products = get_product_names()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    row = []
    for product in products:
        button = KeyboardButton(product)
        row.append(button)
        if len(row) == 3:
            keyboard.add(*row)
            row = []


    if row:
        keyboard.add(row[0])
    back_button = KeyboardButton("–ù–∞–∑–∞–¥üîô")
    keyboard.add(back_button)

    return keyboard

@bot.message_handler(func=lambda message: message.text == "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def update_phone_number(message):
    chat_id = message.chat.id
    if not check_phone_number(chat_id):
        set_integer_flag(1, 'phone_being_entered', 'user', chat_id)
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã): ")

@bot.message_handler(func=lambda message: message.text == "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å—Å")
def update_address_number(message):
    chat_id = message.chat.id
    if not check_address(chat_id):
        set_integer_flag(1, 'address_being_entered', 'user', chat_id)
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å—Å: ")

@bot.message_handler(commands=["start"])
def start_handler(message):
    chat_id = message.chat.id

    create_user(chat_id)

    reply = f"Welcome to the hell {message.from_user.first_name} "
    bot.reply_to(message, reply, reply_markup=get_user_details_keyboard(chat_id))
    print(f'Name_of_user - {message.from_user.first_name}')
    print(f'Username_of_user - @{message.from_user.username}')
    print(f'ID_user - {message.from_user.id}')


def check_phone_if_yes_update(chat_id, message):
    if get_integer_flag(column_name='phone_being_entered',
                        table_name='user',
                        chat_id=chat_id) == 1:
        if message.text.isnumeric():
            update_user_filed(chat_id, 'phone_number', int(message.text))
            set_integer_flag(0, 'phone_being_entered', 'user', chat_id)
            bot.send_message(chat_id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=get_user_details_keyboard(chat_id))
        else:
            bot.send_message(chat_id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")


def check_address_if_yes_update(chat_id, message):
    if get_integer_flag(column_name='address_being_entered',
                        table_name='user',
                        chat_id=chat_id) == 1:

        update_user_filed(chat_id, 'location', message.text)
        set_integer_flag(0, 'address_being_entered', 'user', chat_id)
        bot.send_message(chat_id, "–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=get_user_details_keyboard(chat_id))

def get_user_details_keyboard(chat_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    phone_exist = False
    address_exist = False
    if not check_phone_number(chat_id):
        get_phone_button = KeyboardButton("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ")
        markup.add(get_phone_button)
    else:
        phone_exist = True

    if not check_address(chat_id):
        get_address_button = KeyboardButton("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å—Å")
        markup.add(get_address_button)
    else:
        address_exist = True
    if phone_exist and address_exist:
        markup = main_menu_keyboard()


    return  markup

def create_user(chat_id):
    try:
        conn = sqlite3.connect('Pizza_db')
        cursor = conn.cursor()
        sql = create_new_user_query(chat_id)
        cursor.execute(sql)
        conn.commit()
    except Exception as e:
        print(e)




@bot.message_handler(func=lambda message: message.text == "–ú–µ–Ω—éüçî")
def menu_handler(message):
    reply = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—É"
    bot.reply_to(message, reply, reply_markup=menu_keyboard())
    stack.push(menu_keyboard())


def choose_amount_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    row1 = [KeyboardButton("1"),KeyboardButton("2"),KeyboardButton("3")]
    row2 = [KeyboardButton("4"),KeyboardButton("5"),KeyboardButton("6")]
    row3 = [KeyboardButton("7"),KeyboardButton("8"),KeyboardButton("9")]
    row4 = KeyboardButton("–ù–∞–∑–∞–¥‚¨ÖÔ∏è")

    keyboard.add(*row1)
    keyboard.add(*row2)
    keyboard.add(*row3)
    keyboard.add(row4)
    return keyboard


@bot.message_handler(func=lambda message: message.text in get_product_names())
def product_handler(message):
    product_name = message.text
    product_description, product_price, id_ = get_product_data(product_name)
    reply_message = f"*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:*{product_name}\n"
    reply_message += f"*–û–ø–∏—Å–∞–Ω–∏–µ:*{product_description}\n"
    reply_message += f"*–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω—É –ø–∏—Ü—Ü—É:*{product_price} —Å—É–º"

    start_getting_quantity(message.chat.id, product_name)

    stack.push(choose_amount_keyboard())
    bot.send_message(message.chat.id, reply_message, parse_mode='MARKDOWN', reply_markup=choose_amount_keyboard())

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥‚¨ÖÔ∏è")
def back_handler(message):
    stack.pop()
    menu_to_go_back = stack.top()
    bot.send_message(message.chat.id, "–ü—Ä–æ—à–ª–æ–µ –º–µ–Ω—é: ", reply_markup=menu_to_go_back)
    set_integer_flag(0, "quantity_being_entered", "user", message.chat.id)

def check_for_quantity(chat_id, message):
    is_quantity = get_integer_flag("quantity_being_entered", "user", chat_id)
    if is_quantity == 1:
        if message.text.isnumeric() and int(message.text) > 0:
            product_id = get_product_from_user(chat_id)
            amount = int(message.text)
            insert_data_to_basket(chat_id, product_id, amount)
            bot.send_message(chat_id, "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
            stack.pop()
            keyboard = stack.top()
            bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ —á—Ç–æ —Ç–æ –µ—â–µ?", reply_markup=keyboard)
            set_integer_flag(0, "quantity_being_entered", "user", chat_id)
        else:
            bot.send_message(chat_id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.")


def basket_keyboard(basket_data):

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    for name, amount, price, id_ in basket_data:
        button = KeyboardButton(f"{name} - {amount} ‚ùå")
        keyboard.add(button)

    back_button = KeyboardButton("–ù–∞–∑–∞–¥‚¨ÖÔ∏è")
    order = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å")
    keyboard.add(back_button, order)

    return keyboard



@bot.message_handler(func=lambda message: message.text == '–ö–æ—Ä–∑–∏–Ω–∞üß∫')
def basket_handler(message):
    basket_data = fetch_basket_data(chat_id=message.chat.id)

    if len(basket_data) == 0:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    reply_message = create_basket_data_message(basket_data)
    stack.push(basket_keyboard(basket_data))
    bot.send_message(message.chat.id, reply_message, parse_mode='MARKDOWN', reply_markup=basket_keyboard(basket_data))


def create_basket_data_message(basket_data):
    reply_message = ""
    total_price = 0
    for name, amount, price, _ in basket_data:
        reply_message += f"*{name}* - {amount} —à—Ç—É–∫ –ø–æ {price} —Å—É–º\n"
        total_price += price * amount
    reply_message += f"–û–±—â–∞—è —Å—É–º–º–∞ = *{total_price}*"
    return reply_message


@bot.message_handler(func=lambda message: message.text in [f"{name} - {amount} ‚ùå" for name, amount, price, _ in fetch_basket_data(message.chat.id)])
def delete_product_handler(message):
    products = [(name, amount) for name, amount, _, _ in fetch_basket_data(message.chat.id) if f"{name} - {amount} ‚ùå" == message.text]
    name, amount = products[0]
    delete_item_from_basket(message.chat.id, name, amount)

    basket_data = fetch_basket_data(message.chat.id)
    if len(basket_data) == 0:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", reply_markup=stack.top())
        return
    bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!", reply_markup=basket_keyboard(basket_data))
    reply_message = create_basket_data_message(basket_data)
    bot.send_message(message.chat.id, reply_message, parse_mode='MARKDOWN')

def order_keyboard():
     keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

     share_contact_button = KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)

     share_location_button = KeyboardButton("–°–∫–∏–Ω—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é", request_location=True)

     back_button = KeyboardButton("–ù–∞–∑–∞–¥‚¨ÖÔ∏è")
     keyboard.add(share_location_button)
     keyboard.add(share_contact_button)
     keyboard.add(back_button)

     return keyboard
@bot.message_handler(func=lambda message: message.text == "–ó–∞–∫–∞–∑–∞—Ç—å")
def order_message_handler(message):
    stack.push(order_keyboard())
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=order_keyboard())


def check_for_order_being_entered(message):
    order_flag = get_integer_flag("order_being_made", "user", message.chat.id)
    if order_flag == 0:
        if message.content_type == "contact":
            phone_number = message.contact.phone_number
            phone_number = phone_number[1:]
            update_user_filed(message.chat.id, "phone_number", phone_number)
        if message.content_type == "location":
            location = message.location
            location = location.latitude, location.longitude
            update_user_filed(message.chat.id, "location", str(location))
            set_integer_flag(0, "order_being_made", "user", message.chat.id)
            create_order(message.chat.id)
            #clear_basket(message.chat.id)
            bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")

@bot.message_handler(content_types=['text' , 'contact' , 'location'])
def message_handler(message):

    chat_id = message.chat.id
    create_user(chat_id)
    check_phone_if_yes_update(chat_id, message)
    check_address_if_yes_update(chat_id, message)

    check_for_quantity(chat_id, message)
    check_for_order_being_entered(message)

    if message.text == "–ú–µ–Ω—éüçî":
        bot.reply_to(message, '–í—ã–±–µ—Ä–∏ –ø–∏—Ü—Ü—É:üçï', reply_markup=menu_keyboard())
    if message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è":
        bot.reply_to(message, '-–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ:üí©-', reply_markup=back_keyboard())
    """if message.text == "–ö–æ—Ä–∑–∏–Ω–∞üß∫":
        bot.reply_to(message, '-–ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ:üí©-', reply_markup=back_keyboard())"""
    if message.text == "–î–æ—Å—Ç–∞–≤–∫–∞üöö":
        bot.reply_to(message,
                     '–ï—Å–ª–∏ –º—ã –Ω–µ —É—Å–ø–µ–µ–º –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–∏ 60 –º–∏–Ω—É—Ç, —Ç–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–∏—Ü—Ü—ÉüéÅ\n\n'
                     '- –î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è‚úÖ\n'
                     '- –î–æ—Å—Ç–∞–≤–∏–º –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 50.000 sumüí¥\n'
                     'P.S —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å —Ç–≥ –±–æ—Ç–∞ –¥–æ–¥–æ –ø–∏—Ü—Ü—ã')
    if message.text == "–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüìù":
        bot.reply_to(message, ':–î–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç\n'
                              '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å\n'
                              '–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç 1 –¥–æ 5', reply_markup=feedback_keyboard())

    if message.text == '–ù–∞–∑–∞–¥üîô':
        bot.reply_to(message, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å<b>{message.from_user.first_name}üíõ</b>!\n'
                                f'–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?', parse_mode='html', reply_markup=main_menu_keyboard())

    if message.text == 'üòä –ú–Ω–µ –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, 5 ‚ù§Ô∏è':
        bot.reply_to(message, '–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å, –Ω–∞–¥–µ–µ–º—Å—è –Ω–∞ –Ω–∞—à–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æü§ó\n –í–∞—àDodoPizza ‚ù§Ô∏è',
                    reply_markup=main_menu_keyboard())

    if message.text == '‚ò∫Ô∏è–ù–æ—Ä–º–∞–ª—å–Ω–æ, 4 ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è':
        bot.reply_to(message, '–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å üòä. –ß—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å?ü§î',
                    reply_markup=back_keyboard())

    if message.text == '–ù–∞–∑–∞–¥‚¨ÖÔ∏è':
        bot.reply_to(message, '–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?üçî', reply_markup=main_menu_keyboard())
    if message.text == 'üòê –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, 3 ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è':
        bot.reply_to(message, '–ú—ã —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –Ω–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–∞–≤–¥–∞—Ç—å –≤–∞—à–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π.\n'
                              '–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è  üëáüèª.\n'
                              '–ú—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ  üôèüèª', reply_markup=back_keyboard())

    if message.text == "‚òπÔ∏è–ú–Ω–µ –Ω–µ –∑–∞—à–ª–æ, 2 ‚≠êÔ∏è‚≠êÔ∏è":
        bot.reply_to(message, '–ú—ã —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–ª–∏ –≤–∞—Å.\n'
                              '–ü–æ–º–æ–≥–∏—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ, –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è üëáüèª.\n'
                              '–ú—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ª—É—á—à–µ üôèüèª', reply_markup=back_keyboard())
    if message.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã‚òéÔ∏è':
        bot.reply_to(message, '- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +998(97)157-79-97\n- –ó–≤–æ–Ω–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π‚úÖ', reply_markup=main_menu_keyboard())

def menu_pizza_keyboard():
    markup = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)

    button1 = KeyboardButton('–ü–µ–ø–µ—Ä–æ–Ω–∏')
    button2 = KeyboardButton('–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞')
    button3 = KeyboardButton('–ì–∞–≤–∞–π—Å–∫–∞—è')
    button4 = KeyboardButton('–ö–æ–º–±–æ')
    button5 = KeyboardButton('—á–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞')
    button6 = KeyboardButton('–¶—ã–ø–ª–µ–Ω–æ–∫ —Ä–∞–Ω—á')
    button7 = KeyboardButton('üîô')

    markup.add(button1,button2,button3)
    markup.add(button4,button5,button6)
    markup.add(button7)


    return markup

def feedback_keyboard():
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    button1 = KeyboardButton('üòä –ú–Ω–µ –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, 5 ‚ù§Ô∏è')
    button2 = KeyboardButton('‚ò∫Ô∏è–ù–æ—Ä–º–∞–ª—å–Ω–æ, 4 ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è')
    button3 = KeyboardButton('üòê –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, 3 ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è')
    button4 = KeyboardButton('‚òπÔ∏è–ú–Ω–µ –Ω–µ –∑–∞—à–ª–æ, 2 ‚≠êÔ∏è‚≠êÔ∏è')

    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    markup.add(button4)


    return markup



def back_keyboard():
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)

    button = KeyboardButton('–ù–∞–∑–∞–¥‚¨ÖÔ∏è')
    markup.add(button)

    return markup



'''WEBHOOK_HOST = '<ip/host where the bot is running>'
WEBHOOK_PORT = 8443  # 443, 80, 88 or 8443 (port need to be 'open')
WEBHOOK_LISTEN = '0.0.0.0'  # In some VPS you may need to put here the IP addr

WEBHOOK_SSL_CERT = './webhook_cert.pem'  # Path to the ssl certificate
WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # Path to the ssl private key

# Quick'n'dirty SSL certificate generation:
#
# openssl genrsa -out webhook_pkey.pem 2048
# openssl req -new -x509 -days 3650 -key webhook_pkey.pem -out webhook_cert.pem
#
# When asked for "Common Name (e.g. server FQDN or YOUR name)" you should reply
# with the same value in you put in WEBHOOK_HOST

WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % TOKEN

try:
    # Python 2
    from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
except ImportError:
    # Python 3
    from http.server import BaseHTTPRequestHandler, HTTPServer


# WebhookHandler, process webhook calls
class WebhookHandler(BaseHTTPRequestHandler):
    server_version = "WebhookHandler/1.0"

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

    def do_GET(self):
        self.send_response(200)
        self.end_headers()

    def do_POST(self):
        if self.path == WEBHOOK_URL_PATH and \
           'content-type' in self.headers and \
           'content-length' in self.headers and \
           self.headers['content-type'] == 'application/json':
            json_string = self.rfile.read(int(self.headers['content-length']))

            self.send_response(200)
            self.end_headers()

            update = Update.de_json(json_string)
            bot.process_new_messages([update.message])
        else:
            self.send_error(403)
            self.end_headers()


# Start server
httpd = HTTPServer((WEBHOOK_LISTEN, WEBHOOK_PORT),
                   WebhookHandler)

httpd.socket = ssl.wrap_socket(httpd.socket,
                               certfile=WEBHOOK_SSL_CERT,
                               keyfile=WEBHOOK_SSL_PRIV,
                               server_side=True)

httpd.serve_forever()'''
bot.infinity_polling()






















